	/**
	 * helper method for deleteRoot
	 * @param value
	 */
	public void delete(Anytype value)
	{
		System.out.println("Deleting " + value);
		if(root == null)
			return;
		Node parent = root;
		Node curr = root;
		boolean foundNode = false; // finding the node to remove
		while(curr != null)
		{
			int compareResult = 0;
			if(cmp != null)
				compareResult = cmp.compare(curr.data, value);
			else
				compareResult = value.compareTo(curr.data);
			
			if(compareResult < 0)
			{
				parent = curr;
				curr = curr.left;
			}
			else if(compareResult > 0)
			{
				parent = curr;
				curr = curr.right;
			}
			else
			{
				foundNode = true;
				break;
			}
		}
		if(!foundNode) // node is not found 
			return;
		
		boolean rSide = false; 
		if(parent.right == curr) rSide = true;
		//Deletion cases
		if(curr.left == null && curr.right == null)
		{ //is a leaf
			System.out.println("Has no subtree");
			if(!rSide)
			{ //is of parent's left
				parent.left = null;
			}
			else
			{
				parent.right = null;
			}
			curr = null;
			if(parent == root)
				root = null;
		}
		else if (curr.left == null && curr.right != null)
		{ // has a right subtree
			System.out.println("Has right subtree");
			if(curr == root)
			{
				root = curr.right;
			}
			else
			{
				if(!rSide)
				{
					parent.left = curr.right;
				}
				else
				{
					parent.right = curr.right;
				}
			}
		}
		else if (curr.left != null && curr.right == null)
		{ //has a left subtree
			System.out.println("Has left subtree");
			if(curr == root)
			{
				root = curr.left;
			}
			else
			{
				if(!rSide)
				{
					parent.left = curr.left;
				}
				else
				{
					parent.right = curr.left;
				}
			}
		}
		else
		{ // have both subtrees
			System.out.println("Has both subtrees");
			System.out.println(curr.right.data);
			Node leftMost = curr.right;
			Node leftMostParent = curr.right;
			while(leftMost.left != null)
			{
				leftMostParent = leftMost;
				leftMost = leftMost.left;
			}
			curr.data = leftMost.data;
			if(curr.right == leftMost)
			{
				curr.right = null;
				if(leftMost.right != null)
					curr.right = leftMost.right;
			}
			if(leftMostParent != leftMost)
			{
				if(leftMost.right != null)
				{
					leftMostParent.left = leftMost.right;
				}
				else
				{
					leftMostParent.left = null;
				}
			}
		
		}
		
	}
	/**
	 * deleting root of the tree
	 */
	public void deleteRoot()
	{
		System.out.println("Deleting root " + root.data);
		delete(root.data);
		if(isEmpty() == false)
		{
			System.out.println("Root is now " + root.data);
		}
		else
		{
			System.out.println("ROOT equals Null, Tree is clean");
		}
	}
	public boolean isEmpty()
	{
		if(root != null)
			return false;
		return true;
	}