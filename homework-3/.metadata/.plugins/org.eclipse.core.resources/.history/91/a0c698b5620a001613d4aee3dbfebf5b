//import java.util.Comparator;
public class BinaryHeap<Anytype extends Comparable <? super Anytype>> 
{
	/**
	 * private variables
	 */
	private int currentSize;
	private Anytype[] array;
	
	public BinaryHeap()
	{
		
	}
	
	public BinaryHeap(int capacity)
	{
		
	}
	
	public BinaryHeap(Anytype[] items)
	{
		
	}
	
	
	public void insert(Anytype x)
	{
		if (currentSize == array.length - 1)
			enlargeArray(array.length * 2 + 1);
		
		// percolating upwards
		
		int hole = ++currentSize;
		for(array[0] = x; x.compareTo( array[ hole / 2 ] ) < 0; hole /= 2)
		{
			array[hole] = array[hole / 2];
		}
		array[hole] = x;
	}
	
	private void enlargeArray(int i)
	{
		// TODO Auto-generated method stub
		
	}

	public Anytype deleteMin()
	{
		return null;xx
	}
	
	public boolean isEmpty()
	{
		return false;
	}
	
	private void makeEmpty()
	{
		
	}
	
	private void percolateDown(int hole)
	{
		int child;
		Anytype temp = array[hole];
		
		for( ; hole * 2 <= currentSize; hole = child)
			child = hole * 2;
			if (child != currentSize && array[child + 1].compareTo(array[child] < 0)
					child++;
			if (array[child].compareTo(temp) < 0)
				array[hole] = array[child];
			else
				break;
		}
	}
	
	private void buildHeap()
	{
		
	}
}
